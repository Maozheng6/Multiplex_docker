import numpy as np
import cv2
from PIL import Image

def wsi_2_dan(bgr_im):
    matrix = np.array([
        [0.211008, 0.339041, -0.646346, ],
        [-7.565876, -1.898291, -3.057396, ],
        [8.308303, 1.768644, 4.262272, ],
        [0.423514, -0.304383, 1.079028, ],
        [8.498341, 2.800226, -2.535058, ],
        [-7.941607, -0.727354, -6.032954, ],
        [-0.076087, 2.375034, -0.494513, ],
        [-2.028586, -0.758861, 1.203198, ],
        [3.215897, 0.753147, 1.475563, ],
        [-0.306964, -0.675827, 0.833499, ],
        [0.501877, -0.557836, 4.965655, ],
        [-3.134376, -1.322737, 2.170693, ],
        [0.412375, -1.682529, -0.360446, ],
    ], dtype=np.float32)

    rgb_im_0to1 = bgr_im[..., ::-1].astype(np.float32) / 255.0
    s0, s1 = rgb_im_0to1.shape[0], rgb_im_0to1.shape[1]
    fea = rgb_im_0to1.reshape((s0 * s1, 3))
    fea = np.concatenate((np.ones((fea.shape[0], 1), dtype=np.float32),
                          fea**0.5,
                          fea,
                          fea*fea,
                          np.log(1.1+fea)), axis=-1)
    #fea = np.concatenate((np.ones((fea.shape[0], 1), dtype=np.float32), fea), axis=-1)
    trans_im = np.matmul(fea, matrix)
    trans_im = trans_im.reshape((s0, s1, 3))

    return np.clip(trans_im[..., ::-1] * 255.0, 0, 255)


def dan_2_wsi(bgr_im):
    matrix_list = [np.array([
    [-0.691400, -0.907071, -0.312631, ],
    [0.990122, 0.524586, 1.050779, ],
    [0.399034, 0.060406, -0.272387, ],
    [-0.458520, -0.099836, -0.586634, ],
    [-0.967061, -0.500585, 2.678765, ],
    [-6.216358, -7.330121, -9.360523, ],
    [0.646215, 0.035609, 4.642730, ],
    [0.207017, -0.013670, -0.629438, ],
    [1.763808, 2.080769, 2.373848, ],
    [-0.082624, 0.071838, -1.054938, ],
    [0.294018, -0.121715, -4.899847, ],
    [7.110159, 9.428182, 12.031165, ],
    [-0.141877, 0.217981, -3.842863, ],
    ], dtype=np.float32),
    np.array([
    [-0.348998, 0.095725, -0.042487, ],
    [0.995965, 0.296123, 1.066293, ],
    [0.206360, 0.228342, -0.302816, ],
    [-0.681683, -0.374928, -1.113111, ],
    [-2.713301, 1.112927, 1.193312, ],
    [1.341621, -1.042814, -1.686801, ],
    [-1.262450, 1.833873, 1.974162, ],
    [0.702425, -0.333071, -0.339547, ],
    [-0.365274, 0.309220, 0.417382, ],
    [0.374709, -0.432080, -0.544830, ],
    [2.895458, -1.239219, -2.688078, ],
    [-1.702090, 1.214354, 2.759007, ],
    [2.458807, -0.988419, 0.366372, ],
    ], dtype=np.float32),
    ]
    m_indx = np.random.choice(len(matrix_list))
    #print('m_indx',m_indx)
    matrix = matrix_list[m_indx]
    rgb_im_0to1 = bgr_im[..., ::-1].astype(np.float32) / 255.0
    s0, s1 = rgb_im_0to1.shape[0], rgb_im_0to1.shape[1]
    fea = rgb_im_0to1.reshape((s0 * s1, 3))
    fea = np.concatenate((np.ones((fea.shape[0], 1), dtype=np.float32),
                          fea**0.5,
                          fea,
                          fea*fea,
                          np.log(1.1+fea)), axis=-1)
    #fea = np.concatenate((np.ones((fea.shape[0], 1), dtype=np.float32),      fea), axis=-1)
    trans_im = np.matmul(fea, matrix)
    trans_im = trans_im.reshape((s0, s1, 3))

    return np.clip(trans_im[..., ::-1] * 255.0, 0, 255)

